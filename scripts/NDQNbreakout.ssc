// Run this script from the BIDMach_RL/scipts directory, or edit the rom path below to an absolute path. 
// Game roms should be in BIDMach_RL/roms for the default path to work. 

val rom_dir = "../roms/";

val npar = 16;                                  // Number of parallel environments

class ModelOpts extends NDQNalgorithm.Options with DQNestimator.Opts;

val opts = new ModelOpts;                      // Model options
opts.discount_factor = 0.99f;                  // Reward discount factor
opts.vel_decay = 0.9f;                         // Velocity (momentum) decay for optimizer
opts.gsq_decay = 0.99f;                        // Squared gradient memory decay factor for MSProp

opts.nsteps = 5000000;                          // Number of steps to run (game actions per environment)
opts.ndqn = 5;                                 // Number of DQN steps per update
opts.target_window = 50;                       // Interval to update target estimator from q-estimator
opts.print_steps = 10000;                      // Number of steps between printouts
opts.nwindow = 4;                              // Sensing window = last n images in a state
opts.init_moves = 4000;                        // Upper bound on random number of moves to take initially

opts.hasBias = true;
opts.tensorFormat = Net.TensorNCHW;
//opts.clipByValue = 1f;                         // gradient clipping

opts.lr_schedule = linterp(0f \ 3e-5f on
                           1f \ 3e-5f, opts.nsteps); 

opts.eps_schedule = linterp(0f \ 0.3f on 
                            0.9f \ 0.0001f on
                            1f \ 0.0001f, opts.nsteps);


opts.nhidden = 16;                             // Number of hidden layers for estimators
opts.nhidden2 = 32;
opts.nhidden3 = 256;
opts.nactions = 4;
opts.logfile = "logNDQNbreakout.txt"

val envopts = new AtariEnvironment.Options
envopts.rom_dir=rom_dir;
envopts.rom_name="Breakout.bin";       
envopts.endEpochAtReward = false;
envopts.endEpochAtDeath = true;
envopts.xoff = -2;
envopts.yoff = 30;
envopts.pool = false;
envopts.shrink = true;
envopts.mode = ALE.ALEimageModeGrayscale;
envopts.background = 0;
envopts.frameskip = irow(4,4);
envopts.repeat_action_probability = 0f;
envopts.limit_reward_incr = row(0f,1f);
envopts.fire_to_start = true;

val envs = new Array[Environment](npar);
for (i <- 0 until npar) {
    envopts.random_seed = i;
    envs(i) = new AtariEnvironment(envopts);
};

val model = new NDQNalgorithm(envs, AtariEnvironment.stepAll, DQNestimator.build, opts);

model.startup;

println("\nRunning training in the background.\nSaving to file '%s' in the current directory.\nExamine the 'model' variable to track learning state.\n" format opts.logfile);

model.launchTrain
// model.train
